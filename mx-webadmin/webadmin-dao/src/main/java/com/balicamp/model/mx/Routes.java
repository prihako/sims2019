package com.balicamp.model.mx;

// Generated Dec 13, 2012 12:58:42 PM by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import com.balicamp.model.admin.BaseAdminModel;
import com.balicamp.model.ui.PropertySelectionData;

/**
 * Routes generated by hbm2java
 * @version $Id: Routes.java 503 2013-05-24 08:13:16Z rudi.sadria $
 */
@Entity
@Table(name = "routes", uniqueConstraints = @UniqueConstraint(
		columnNames = { "transaction_id", "last_invocation_id", "condition", "weight" }))
public class Routes extends BaseAdminModel  implements java.io.Serializable{

	private static final long serialVersionUID = 1L;
	
	private int id;
	private Transactions transactions;
	private Mappings mappingsByLastInvocationId;
	private Mappings mappingsByNextInvocationId;
	private String condition;
	private int weight;
	private boolean synchronized_;
	private boolean nextsInBackground;

	public Routes() {
	}

	public Routes(int id, Transactions transactions, int weight, boolean synchronized_, boolean nextsInBackground) {
		this.id = id;
		this.transactions = transactions;
		this.weight = weight;
		this.synchronized_ = synchronized_;
		this.nextsInBackground = nextsInBackground;
	}

	public Routes(int id, Transactions transactions, Mappings mappingsByLastInvocationId,
			Mappings mappingsByNextInvocationId, String condition, int weight, boolean synchronized_,
			boolean nextsInBackground, Set<Conditionings> conditioningses) {
		this.id = id;
		this.transactions = transactions;
		this.mappingsByLastInvocationId = mappingsByLastInvocationId;
		this.mappingsByNextInvocationId = mappingsByNextInvocationId;
		this.condition = condition;
		this.weight = weight;
		this.synchronized_ = synchronized_;
		this.nextsInBackground = nextsInBackground;
	}

	@Id
	@Column(name = "id", unique = true, nullable = false)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "transaction_id", nullable = false)
	public Transactions getTransactions() {
		return this.transactions;
	}

	public void setTransactions(Transactions transactions) {
		this.transactions = transactions;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "last_invocation_id")
	public Mappings getMappingsByLastInvocationId() {
		return this.mappingsByLastInvocationId;
	}

	public void setMappingsByLastInvocationId(Mappings mappingsByLastInvocationId) {
		this.mappingsByLastInvocationId = mappingsByLastInvocationId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "next_invocation_id")
	public Mappings getMappingsByNextInvocationId() {
		return this.mappingsByNextInvocationId;
	}

	public void setMappingsByNextInvocationId(Mappings mappingsByNextInvocationId) {
		this.mappingsByNextInvocationId = mappingsByNextInvocationId;
	}

	@Column(name = "condition")
	public String getCondition() {
		return this.condition;
	}

	public void setCondition(String condition) {
		this.condition = condition;
	}

	@Column(name = "weight", nullable = false)
	public int getWeight() {
		return this.weight;
	}

	public void setWeight(int weight) {
		this.weight = weight;
	}

	@Column(name = "synchronized", nullable = false)
	public boolean isSynchronized_() {
		return this.synchronized_;
	}

	public void setSynchronized_(boolean synchronized_) {
		this.synchronized_ = synchronized_;
	}

	@Column(name = "nexts_in_background", nullable = false)
	public boolean isNextsInBackground() {
		return this.nextsInBackground;
	}

	public void setNextsInBackground(boolean nextsInBackground) {
		this.nextsInBackground = nextsInBackground;
	}

	@Override
	@Transient
	public Object getPKey() {
		return new String("" + this.getId());
	}

}
